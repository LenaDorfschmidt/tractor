#! /bin/bash

status=1
command="$0 $*"
keep_log=0
keep_report=0
tmpdir=${TMPDIR:-/tmp}
log_file="$tmpdir/tractor$$_log"
expect_file="$tmpdir/tractor$$_expect"
report_file="$tmpdir/tractor$$_report"
trap 'rm -f $expect_file; [ $keep_report -eq 0 ] && rm -f $report_file; [ $keep_log -eq 0 ] && rm -f $log_file; exit $status' 0 1 2 15

config_file="/dev/null"
output_level='OL$Warning'
write_history=1
show_options=0
rprofile_backed_up=0
quiet=0
batch_mode=0
verbose_level=0
working_dir="."

type expect >/dev/null 2>&1
expect_available=$?

[ -f "$HOME/.tractor/config" ] && source "$HOME/.tractor/config"

usage()
{
    echo "tractor (v1.2.0)"
    echo "Run a TractoR experiment script in R and report the results"
    echo
    echo "Usage: tractor [-ldzqbr] [-v level] [-w working_dir] [-c config_file] ..."
    echo "                                              script [arg1 [arg2 ...]]"
    echo "       tractor -o [-w working_dir] script"
    echo "       tractor -h"
    echo
    echo "  -h          Display this usage information and exit"
    echo "  -o          Do not run the script, but instead produce a list of the"
    echo "              options that it supports, along with their default values"
    echo "  -l          Direct output to a log file as well as stdout"
    echo "  -d          Produce debugging output; equivalent to '-v 3'"
    echo "  -z          Do not write the command line used into a history log file"
    echo "  -q          Run in quiet mode; the tractor script will not produce any"
    echo "              output of its own"
    echo "  -b          Run R in batch mode, which is entirely noninteractive, and"
    echo "              will produce no output until it finishes running: this can"
    echo "              be useful when running multiple experiments in parallel"
    echo "  -r          Produce a report file in the working directory (if anything"
    echo "              is reported by the experiment script)"
    echo "  -v {0-3}    Produce verbose output: the level determines the amount of"
    echo "              extra information reported, from 0 (least, the default) to"
    echo "              3 (most)"
    echo "  -w dir      Specify the working directory for the experiment, which"
    echo "              will be created if necessary (default .)"
    echo "  -c file     Specify a configuration file in YAML format"
    echo
    echo "The script, a text file containing R code, need not be specified with the"
    echo "'.R' extension. The program searches in the current working directory for"
    echo "the specified script first, followed by any directory specified using the"
    echo "'-w' option, then ~/.tractor, then /etc/tractor, and finally the etc/exp-"
    echo "eriments directory under \$TRACTOR_HOME. Additional paths can be specified"
    echo "using the \$TRACTOR_PATH environment variable. (The man page has details.)"
    echo
}

set -- `getopt "hldozqbrv:w:c:" "$@"` || {
    usage 1>&2
    exit
}

while [ $# -gt 0 ]
    do
    case "$1" in
        -h) usage; status=0; exit ;;
        -l) keep_log=1 ;;
        -d) verbose_level=3 ;;
        -o) show_options=1 ;;
        -z) write_history=0 ;;
        -q) quiet=1 ;;
        -b) batch_mode=1 ;;
        -r) keep_report=1 ;;
        -v) shift; verbose_level=$1 ;;
        -w) shift; working_dir=`echo $1 | sed 's/\/$//'` ;;
        -c) shift; config_file="$config_file:$1" ;;
        --) shift; break ;;
    esac
    shift
done

[ $# -eq 0 ] && {
    echo "Error: No script name given; type tractor -h for help" 1>&2
    exit
}

script_name=`echo $1 | sed 's/\.R$//'`

[ $keep_log -eq 1 ] && log_file="$working_dir/tractor_${script_name}.log"

[ $keep_report -eq 1 ] && report_file="$working_dir/tractor_report.yaml"

file_found=0
script_file="${script_name}.R"
shift
args="$@"

if [ -f $script_file ]
    then
    file_found=1
elif [ -f "$working_dir/$script_file" ]
    then
    script_file="$working_dir/$script_file"
    file_found=1
elif [ -f "$HOME/.tractor/$script_file" ]
    then
    script_file="$HOME/.tractor/$script_file"
    file_found=1
elif [ -f "/etc/tractor/$script_file" ]
    then
    script_file="/etc/tractor/$script_file"
    file_found=1
fi

if [ $file_found -ne 1 ]
    then
    for d in `echo "$TRACTOR_PATH:${TRACTOR_HOME}${TRACTOR_HOME+/etc/experiments}" | sed 's/:/ /g'`
        do
        if [ -f "$d/$script_file" ]
            then
            script_file="$d/$script_file"
            file_found=1
            break
        fi
    done
fi

[ $file_found -ne 1 ] && {
    echo "Error: Script file not found" 1>&2
    exit
}

[ $show_options -eq 1 ] && {
    echo "OPTIONS for script $script_file (* required)"
    n_options=`grep -c getWithDefault $script_file`
    if [ $n_options -eq 0 ]
        then
        echo "   None"
        else
        grep 'getWithDefault' $script_file | grep 'errorIfMissing=TRUE' | awk -F ' *"?(\\(|\\)|,) *"?' '{ print " * "$2": "$3 }'
        grep 'getWithDefault' $script_file | grep -v 'errorIfMissing=TRUE' | awk -F ' *"?(\\(|\\)|,) *"?' '{ print "   "$2": "$3 }'
    fi
    grep '#@args' $script_file | sed 's/#@args /ARGUMENTS: /'
    grep '#@desc' $script_file | sed 's/#@desc //'
    status=0
    exit
}

[ ! -e $working_dir ] && mkdir -p $working_dir

export verbose_level
if [ $verbose_level -eq 1 ]
    then
    output_level='OL$Info'
elif [ $verbose_level -eq 2 ]
    then
    output_level='OL$Verbose'
elif [ $verbose_level -eq 3 ]
    then
    output_level='OL$Debug'
fi

[ $expect_available -ne 0 -a -f .Rprofile ] && {
    echo "Ignoring current .Rprofile file"
    mv .Rprofile .Rprofile.bak
    rprofile_backed_up=1
}

[ $quiet -eq 0 ] && echo "Starting TractoR environment..."

if [ $batch_mode -eq 1 ]
    then
    cat >"$expect_file" <<EOF
source('$script_file')
setOutputLevel($output_level)
createWorkspaceFromYaml('$config_file')
createWorkspaceFromYaml(text='$args')
setwd('$working_dir')
results <- try(runExperiment())
writeReportToYaml(results,fileName='$report_file')
q(runLast=FALSE)
EOF
    R CMD BATCH --slave --vanilla $expect_file $log_file
elif [ $expect_available -eq 0 ]
    then
    output_level=`echo $output_level | sed 's/\\$/\\\\\\$/'`
    cat >"$expect_file" <<EOF
log_user 0
spawn R --quiet --vanilla
set timeout 3
send "source('$script_file')\n"
expect -re ">.+\r\n"
send "setOutputLevel($output_level)\n"
expect -re ">.+\r\n"
send "createWorkspaceFromYaml('$config_file')\n"
expect -re ">.+\r\n"
send "createWorkspaceFromYaml(text='$args')\n"
expect -re ">.+\r\n"
send "setwd('$working_dir')\n"
expect -re ">.+\r\n"
send "results <- try(runExperiment()); writeReportToYaml(results,fileName='$report_file'); q()\n"
expect -re ">.+\r\n"
interact
EOF
    expect -f $expect_file | tee $log_file
    else
    echo "library('utils'); library('graphics'); library('grDevices'); library('stats'); source('$script_file'); setOutputLevel($output_level); createWorkspaceFromYaml('$config_file'); createWorkspaceFromYaml(text='$args'); setwd('$working_dir'); results <- try(runExperiment()); writeReportToYaml(results,fileName='$report_file'); q()" >.Rprofile
    R --slave --no-save --no-restore --no-site-file --no-environ 2>&1 | tee $log_file
fi

warnings=`grep -c WARNING $log_file`
errors=`grep -c Error $log_file`

[ $batch_mode -eq 1 ] && cat $log_file

[ $write_history -eq 1 ] && echo "[`date`] $command [${warnings}W/${errors}E]" >> "$working_dir/tractor_history.log"

[ $expect_available -ne 0 ] && {
    rm -f .Rprofile
    [ $rprofile_backed_up -eq 1 ] && mv .Rprofile.bak .Rprofile
}

if [ $quiet -eq 0 ]
    then
	[ -f "$report_file" ] && cat "$report_file" | sed 's/^/- /'
    echo "Experiment completed with $warnings warning(s) and $errors error(s)"
fi

[ $errors -eq 0 ] && status=0
