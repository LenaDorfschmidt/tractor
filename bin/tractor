#! /bin/sh

status=1
keep_report=0
log_file="/tmp/tractor$$_log"
expect_file="/tmp/tractor$$_expect"
report_file="/tmp/tractor$$_report"
trap 'rm -f $log_file $expect_file; [ $keep_report -eq 0 ] && rm -f $report_file; exit $status' 0 1 2 15

config_file="/dev/null"
output_level='OL$Warning'
use_log=0
show_options=0
rprofile_backed_up=0
quiet=0
verbose_level=0
working_dir="."

type expect >/dev/null 2>&1
expect_available=$?

usage()
{
    echo "tractor v1.0.0, by Jon Clayden <jon.clayden@gmail.com>"
    echo "Run a TractoR experiment script in R and report the results"
    echo
    echo "Usage: tractor -h"
    echo "       tractor -o [-w working_dir] script"
    echo "       tractor [-ldqr] [-v level] [-w working_dir] [-c config_file] ..."
    echo "                                              script [arg1 [arg2 ...]]"
    echo
    echo "  -h          Display this usage information and exit"
    echo "  -o          Do not run the script, but instead produce a list of the"
    echo "              options that it supports, along with their default values"
    echo "  -l          Direct output to a log file rather than stdout"
    echo "  -d          Produce debugging output; equivalent to '-v 3'"
    echo "  -q          Run in quiet mode; the tractor script will not produce any"
    echo "              output of its own"
    echo "  -r          Produce a report file in the working directory (if anything"
    echo "              is reported by the experiment script)"
    echo "  -v [1-3]    Produce verbose output: the level determines the amount of"
    echo "              extra information reported, from 1 (least) to 3 (most)"
    echo "  -w dir      Specify the working directory for the experiment, which"
    echo "              will be created if necessary (default .)"
    echo "  -c file     Specify a configuration file in YAML format"
    echo
    echo "The script, a text file containing R code, need not be specified with the"
    echo "'.R' extension. The program searches in the current working directory for"
    echo "the specified script first, followed by any directory specified using the"
    echo "'-w' option, then ~/.tractor and finally /etc/tractor. Any script not in"
    echo "one of these locations must be specified using its full path."
    echo
}

set -- `getopt "hldoqrv:w:c:" "$@"` || {
    usage 1>&2
    exit 1
}

while [ $# -gt 0 ]
    do
    case "$1" in
        -l) use_log=1 ;;
        -d) verbose_level=3 ;;
        -o) show_options=1 ;;
        -q) quiet=1 ;;
		-r) keep_report=1 ;;
        -v) shift; verbose_level=$1 ;;
        -w) shift; working_dir=`echo $1 | sed 's/\/$//'` ;;
        -c) shift; config_file="$1" ;;
        --) shift; break ;;
    esac
    shift
done

[ $# -eq 0 ] && {
    usage 1>&2
    exit 1
}

[ $keep_report -eq 1 ] && report_file="$working_dir/tractor_report.yaml"

file_found=0
script_file="`echo $1 | sed 's/\.R$//'`.R"
shift
args="$@"

if [ -f $script_file ]
    then
    file_found=1
elif [ -f "$working_dir/$script_file" ]
    then
    script_file="$working_dir/$script_file"
    file_found=1
elif [ -f "$HOME/.tractor/$script_file" ]
    then
    script_file="$HOME/.tractor/$script_file"
    file_found=1
elif [ -f "/etc/tractor/$script_file" ]
    then
    script_file="/etc/tractor/$script_file"
    file_found=1
fi

[ $file_found -ne 1 ] && {
    echo "Script file not found" 1>&2
    exit 1
}

[ $show_options -eq 1 ] && {
    echo "Options for script $script_file (* required)"
    grep 'getWithDefault' $script_file | grep 'errorIfMissing=TRUE' | awk -F ' *"?(\\(|\\)|,) *"?' '{ print " * "$2": "$3 }'
    grep 'getWithDefault' $script_file | grep -v 'errorIfMissing=TRUE' | awk -F ' *"?(\\(|\\)|,) *"?' '{ print "   "$2": "$3 }'
    grep '#@desc' $script_file | sed 's/#@desc //'
    exit 0
}

[ ! -e $working_dir ] && mkdir -p $working_dir

if [ $verbose_level -eq 1 ]
    then
    output_level='OL$Info'
elif [ $verbose_level -eq 2 ]
    then
    output_level='OL$Verbose'
elif [ $verbose_level -eq 3 ]
    then
    output_level='OL$Debug'
fi

[ $expect_available -ne 0 -a -f .Rprofile ] && {
    echo "Ignoring current .Rprofile file"
    mv .Rprofile .Rprofile.bak
    rprofile_backed_up=1
}

[ $quiet -eq 0 ] && echo "Starting TractoR environment..."

if [ $expect_available -eq 0 ]
    then
    output_level=`echo $output_level | sed 's/\\$/\\\\\\$/'`
    cat >"$expect_file" <<EOF
log_user 0
spawn R --quiet --no-save --no-restore
set timeout 2
send "source('$script_file')\n"
send "setOutputLevel($output_level)\n"
send "setwd('$working_dir')\n"
send "createWorkspaceFromYaml('$config_file')\n"
send "createWorkspaceFromYaml(text='$args')\n"
send "results <- try(runExperiment()); writeReportToYaml(results,fileName='$report_file'); q()\n"
expect -re ">.+\r\n"
interact {
  -o
  -re " >.+\r\n"  { send_user "\$interact_out(0,string)" }
  -re ">.+\r\n"   {}
}
EOF
    expect -f $expect_file | tee $log_file
    else
    echo "library('utils'); library('graphics'); library('grDevices'); library('stats'); source('$script_file'); setOutputLevel($output_level); setwd('$working_dir'); createWorkspaceFromYaml('$config_file'); createWorkspaceFromYaml(text='$args'); results <- try(runExperiment()); writeReportToYaml(results,fileName='$report_file'); q()" >.Rprofile
    R --slave --no-restore 2>&1 | tee $log_file
fi

[ $use_log -eq 1 ] && cp $log_file "$working_dir/tractor.log"

[ $expect_available -ne 0 ] && {
    rm -f .Rprofile
    [ $rprofile_backed_up -eq 1 ] && mv .Rprofile.bak .Rprofile
}

warnings=`grep -c WARNING $log_file`
errors=`grep -c Error $log_file`

if [ $quiet -eq 0 ]
    then
	if [ -f "$report_file" ]
		then
		cat "$report_file" | sed 's/^/- /'
	fi
    echo "Experiment completed with $warnings warning(s) and $errors error(s)"
fi

if [ $warnings -eq 0 -a $errors -eq 0 ]
    then
    status=0
elif [ $errors -eq 0 ]
    then
    status=2
fi
