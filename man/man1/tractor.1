.TH "tractor" 1

.SH NAME
tractor \- Command line interface for the TractoR MRI analysis project

.SH SYNOPSIS
.B tractor \fR[\fB\-ldzqbr\fR] [\fB\-v \fIlevel\fR] [\fB\-w \fIworking_dir\fR] [\fB\-c \fIconfig_file\fR] \fIscript \fR[\fIarguments\fR]\fB
.br
.B tractor \-o \fR[\fB\-w \fIworking_dir\fR]\fB \fIscript\fB
.br
.B tractor \-h

.SH DESCRIPTION
The \fBtractor\fR program provides a simple shell interface to the packages making up the core of the TractoR project, via a set of experiment \fIscripts\fR which encapsulate common tasks. It thereby obviates the need to interact directly with the R language for which the core packages are written. A \fIscript\fR may take a number of \fIarguments\fR and/or configuration parameters, which can be specified on the command line or in a separate file (see "Script Configuration and Arguments" below). In the second synopsis form, using the '\-o' flag, the program will list the options appropriate to the specified experiment. The final form summarises the flags available to the \fBtractor\fR program itself.
.PP
The \fIscript\fR, a text file containing R code, need not be specified with the '\.R' extension. The program searches in the current working directory for the named \fIscript\fR first, followed by any directory specified using the '\-w' flag, then ~/\.tractor, then /etc/tractor, and finally \fB$TRACTOR_HOME\fR/etc/experiments. Additional search paths can be specified using the \fBTRACTOR_PATH\fR variable (see "Environment Variables" below). Any \fIscript\fR not in one of these locations must be specified using its full path.
.PP
By default, a log file containing a history of all TractoR experiments run is created or updated in the working directory. This can be useful to keep track of what has been done, but it can be disabled using the '\-z' flag to reduce clutter if desired.

.SH OPTIONS
.TP
.B \-h
Display usage information and quit.
.TP
.B \-o
Do not run the \fIscript\fR, but instead produce a list of the options that it supports, along with their default values.
.TP
.B \-l
Direct output to a log file as well as \fBstdout\fR.
.TP
.B \-d
Produce debugging output; equivalent to '\-v 3'.
.TP
.B \-z
Do not write the command line used into a history log file.
.TP
.B \-q
Run in quiet mode. The tractor program will not produce any output of its own.
.TP
.B \-b
Run R in batch mode, which is entirely noninteractive, and will produce no output until it finishes running (except to a log file, with '\-l'). This can be useful when running multiple experiments in parallel.
.TP
.B \-r
Produce a report file in the working directory (if anything is reported by the experiment \fIscript\fR).
.TP
.B \-v \fIlevel\fB
Produce verbose output: the \fIlevel\fR determines the amount of extra information reported, from 0 (least, the default) to 3 (most).
.TP
.B \-w \fIworking_dir\fB
Specify the working directory for the experiment, which will be created if necessary (default is the current directory).
.TP
.B \-c \fIconfig_file\fB
Specify a configuration file in YAML format.

.SH SETTING DEFAULT OPTIONS
Since version 1.1.0 of the \fBtractor\fR program, it has been possible to set up user-specific defaults for each of the options that the program supports. To do this, a user can create a file at ~/\.tractor/config which sets any or all of the following variables, using \fBbash\fR(1) syntax. Note that 'off' and 'on' are represented by the numbers 0 and 1, respectively.
.TP
.PP
\fBName\fR             \fBEquivalent flag\fR       \fBDefault value\fR
.br
show_options     -o                    0
.br
keep_log         -l                    0
.br
write_history    -z (switches to 0)    1
.br
quiet            -q                    0
.br
batch_mode       -b                    0
.br
keep_report      -r                    0
.br
verbose_level    -v                    0
.br
working_dir      -w                    '.'
.br
config_file      -c                    '/dev/null' (i\.e\. none)
.PP
Thus, if you do not want a history file to ever be created, and you want moderately verbose output by default, your config file would contain
.TP
.PP
write_history=0
.br
verbose_level=1
.PP
Note that the names of any default configuration files (described below) given to the 'config_file' named option in this way should be separated by colons.

.SH SCRIPT CONFIGURATION AND ARGUMENTS
Most experiment scripts offer a number of options that describe what processing is to be done, and to which data it is to be applied. These options may be specified in a configuration file (with the '\-c' flag), using a small subset of the YAML markup language. Parameter names and values are separated by a colon (and optional space); and lists of values are given inside square brackets, comma-separated:
.TP
.PP
Param1: 17
.br
Param2: off
.br
Param3: [ /data/subject1,
.br
          /data/subject2 ]
.PP
Note that all parameter names begin with an upper case letter, and lists of values may span more than one line. Multiple configuration files may be specified on the command line (using several '\-c' flags), in which case they are read in the order given, with any duplicate parameters in later files overriding the values set in earlier ones.
.PP
Configuration parameters may also be specified directly on the command line, after the script name, although in that case there must be \fIno space\fR between the colon and the value. Lists of values cannot be specified in this way.
.PP
Some scripts additionally take command line arguments, which are specified after the script name, and are distinguished from named parameters by being unlabelled.

.SH EXAMPLES
In the simplest use case, only an experiment script name need be specified, as in
.TP
.PP
tractor preproc
.PP
which runs the 'preproc' script with no arguments or configuration parameters. It is more common, however, that some extra information does need to be supplied.
.TP
.PP
tractor \-v1 track /data/subject1 34,23,17 PointType:fsl
.PP
This example runs the 'track' script, generating moderately verbose output ('\-v1'). It passes two unnamed arguments, a session directory ('/data/subject1') and a seed point ('34,23,17'); and one named parameter, 'PointType', is set to 'fsl'. (This tells the script that the seed point is a voxel location using the FSL convention of indexing from zero. R, by contrast, indexes from one.)

.SH ENVIRONMENT VARIABLES
At present the \fBtractor\fR program makes use of two environment variables, \fBTRACTOR_HOME\fR and \fBTRACTOR_PATH\fR, when looking for \fIscript\fR files. If no \fIscript\fR is found in the current or working directory, or in ~/\.tractor or /etc/tractor, the program next searches any directories given by the \fBTRACTOR_PATH\fR environment variable. (The format of this variable is the same as the standard \fBPATH\fR, with multiple directories separated by colons.) The default search location, \fB$TRACTOR_HOME\fR/etc/experiments, is searched last. 

.SH DIAGNOSTICS
Return value is 0 if no errors were generated by the experiment script, and 1 otherwise. The exact number of errors and warnings generated is written to \fBstdout\fR unless the '\-q' flag is given.

.SH TRACTOR AND R
Unfortunately, R does not currently provide a neat mechanism for interaction of the type that \fBtractor\fR requires. The program will therefore use \fBexpect\fR(1) to interact with R if it is available; otherwise it will use an ".Rprofile" start-up file to run its commands. Both of these approaches have limitations, but are fine for most purposes. A third alternative is to run R in batch mode, which requires no tricks but disallows any interaction with the user. This approach can be enforced using the '\-b' option, which can be useful when processing in parallel.

.SH AUTHOR
Jon Clayden <jon.clayden+tractor@gmail.com>
